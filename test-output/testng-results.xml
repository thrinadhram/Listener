<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="1" failed="2" skipped="1">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-02-09T10:57:15 IST" name="Default suite" finished-at="2023-02-09T10:57:16 IST" duration-ms="1169">
    <groups>
    </groups>
    <test started-at="2023-02-09T10:57:15 IST" name="Default test" finished-at="2023-02-09T10:57:16 IST" duration-ms="1169">
      <class name="Listener.TestClass1">
        <test-method signature="testMethod1()[pri:1, instance:Listener.TestClass1@7d0b7e3c]" started-at="2023-02-09T10:57:15 IST" name="testMethod1" finished-at="2023-02-09T10:57:15 IST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethod1 -->
        <test-method signature="testMethod2()[pri:2, instance:Listener.TestClass1@7d0b7e3c]" started-at="2023-02-09T10:57:15 IST" name="testMethod2" finished-at="2023-02-09T10:57:15 IST" duration-ms="36" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1577)
at org.testng.Assert.assertTrue(Assert.java:56)
at org.testng.Assert.assertTrue(Assert.java:66)
at Listener.TestClass1.testMethod2(TestClass1.java:18)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethod2 -->
        <test-method signature="testMethod3()[pri:3, instance:Listener.TestClass1@7d0b7e3c]" started-at="2023-02-09T10:57:15 IST" name="testMethod3" finished-at="2023-02-09T10:57:16 IST" duration-ms="1024" status="FAIL">
          <exception class="org.testng.internal.thread.ThreadTimeoutException">
            <message>
              <![CDATA[Method Listener.TestClass1.testMethod3() didn't finish within the time-out 1000]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.thread.ThreadTimeoutException: Method Listener.TestClass1.testMethod3() didn't finish within the time-out 1000
at java.base@11.0.13/java.lang.Thread.sleep(Native Method)
at app//Listener.TestClass1.testMethod3(TestClass1.java:23)
at java.base@11.0.13/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base@11.0.13/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base@11.0.13/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base@11.0.13/java.lang.reflect.Method.invoke(Method.java:566)
at app//org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at app//org.testng.internal.invokers.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:47)
at app//org.testng.internal.invokers.InvokeMethodRunnable.call(InvokeMethodRunnable.java:76)
at app//org.testng.internal.invokers.InvokeMethodRunnable.call(InvokeMethodRunnable.java:11)
at java.base@11.0.13/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base@11.0.13/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base@11.0.13/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base@11.0.13/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.thread.ThreadTimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethod3 -->
        <test-method signature="testMethod4()[pri:4, instance:Listener.TestClass1@7d0b7e3c]" started-at="2023-02-09T10:57:16 IST" name="testMethod4" finished-at="2023-02-09T10:57:16 IST" depends-on-methods="Listener.TestClass1.testMethod3" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method Listener.TestClass1.testMethod4() on instance Listener.TestClass1@7d0b7e3c depends on not successfully finished methods 
[Listener.TestClass1.testMethod3() on instance Listener.TestClass1@7d0b7e3c]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method Listener.TestClass1.testMethod4() on instance Listener.TestClass1@7d0b7e3c depends on not successfully finished methods 
[Listener.TestClass1.testMethod3() on instance Listener.TestClass1@7d0b7e3c]
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:150)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMethod4 -->
      </class> <!-- Listener.TestClass1 -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
